{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tiptap-editor",
  "type": "registry:block",
  "title": "TipTap Rich Text Editor",
  "description": "A feature-rich TipTap editor with formatting controls, bubble menu, and syntax highlighting.",
  "dependencies": [
    "@floating-ui/dom@^1.6.0",
    "@tiptap/extension-blockquote@^2.14.0",
    "@tiptap/extension-bubble-menu@^2.14.0",
    "@tiptap/extension-code@^2.14.0",
    "@tiptap/extension-code-block-lowlight@^2.14.0",
    "@tiptap/extension-floating-menu@3.0.0-beta.7",
    "@tiptap/extension-placeholder@^2.14.0",
    "@tiptap/extension-text-align@^2.14.0",
    "@tiptap/extension-underline@2.14.0",
    "@tiptap/pm@^2.14.0",
    "@tiptap/react@^2.14.0",
    "@tiptap/starter-kit@^2.14.0",
    "@types/highlight.js@^10.1.0",
    "highlight.js@^11.11.1",
    "lowlight@^3.3.0"
  ],
  "registryDependencies": [
    "button",
    "toggle",
    "tooltip",
    "dropdown-menu",
    "skeleton"
  ],
  "files": [
    {
      "path": "registry/tiptap-editor/components/tiptap.tsx",
      "content": "'use client'\n\nimport { useEditor, EditorContent, BubbleMenu, ReactNodeViewRenderer } from '@tiptap/react'\nimport StarterKit from '@tiptap/starter-kit'\nimport Underline from '@tiptap/extension-underline'\nimport TextAlign from '@tiptap/extension-text-align'\nimport Placeholder from '@tiptap/extension-placeholder'\nimport CodeBlockLowlight from '@tiptap/extension-code-block-lowlight'\nimport { createLowlight, common } from 'lowlight'\nimport { useState } from 'react'\n\nimport { Toggle } from '@/components/ui/toggle'\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'\n\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuShortcut, DropdownMenuTrigger } from '@/components/dropdown-menu-tiptap'\nimport { Button } from '@/components/ui/button'\nimport { ChevronDown, Underline as UnderlineIcon, Bold, Italic, Strikethrough, Heading1, Heading2, Heading3, Type, AlignLeft, AlignCenter, AlignRight, List, ListOrdered, Code, Copy, Check } from 'lucide-react'\nimport { Skeleton } from '@/components/ui/skeleton'\nimport { CodeBlock } from '@/components/code-block'\n\nconst lowlight = createLowlight(common)\n\nconst CustomCodeBlock = CodeBlockLowlight.extend({\n  addNodeView() {\n    return ReactNodeViewRenderer(CodeBlock)\n  },\n})\n\ninterface TiptapProps {\n    content?: string\n    showFixedMenu?: boolean\n    showBubbleMenu?: boolean\n}\n\nconst Tiptap = ({ content, showFixedMenu = true, showBubbleMenu = true }: TiptapProps) => {\n  const [isCopied, setIsCopied] = useState(false)\n  const editor = useEditor({\n    extensions: [\n        StarterKit,\n        Underline,\n        TextAlign.configure({\n            types: ['heading', 'paragraph'],\n        }),\n        Placeholder.configure({\n            placeholder: 'Write something…',\n        }),\n        CustomCodeBlock.configure({\n            lowlight,\n        }),\n    ],\n    content: content || ``,\n    immediatelyRender: false,\n  })\n\n  const handleCopy = () => {\n    if (!editor) {\n        return\n    }\n    const htmlContent = editor.getHTML()\n    const textContent = editor.getText()\n\n    navigator.clipboard.write([\n        new ClipboardItem({\n            'text/html': new Blob([htmlContent], { type: 'text/html' }),\n            'text/plain': new Blob([textContent], { type: 'text/plain' })\n        })\n    ]).then(() => {\n        setIsCopied(true)\n        setTimeout(() => {\n            setIsCopied(false)\n        }, 2000)\n    }).catch(err => {\n        console.error('Failed to copy rich text, falling back to plain text.', err)\n        navigator.clipboard.writeText(textContent).then(() => {\n            setIsCopied(true)\n            setTimeout(() => {\n                setIsCopied(false)\n            }, 2000)\n        }).catch(err => {\n            console.error('Failed to copy plain text.', err)\n        })\n    })\n  }\n\n  // Skeleton\n  if (!editor) {\n    return (\n        <div className='relative border border-border rounded-md bg-card'>\n            {showFixedMenu && (\n                <div className='sticky top-0 z-10 bg-card rounded-t-md border-b border-border' >\n                    <div className='flex flex-row gap-1 p-2'>\n                        <div className='flex flex-row gap-0.5 w-fit'>\n                            <Button size='sm' variant='secondary' disabled>\n                                <Type className='' />\n                            </Button>\n                        </div>\n                        <div className='flex flex-row gap-0.5 w-fit'>\n                            <Button size='sm' variant='secondary' disabled>\n                                <AlignLeft className='' />\n                            </Button>\n                        </div>\n                        <div className='flex flex-row gap-0.5 w-fit'>\n                            <Toggle size='sm' disabled>\n                                <Bold className='' />\n                            </Toggle>\n                            <Toggle size='sm' disabled>\n                                <Italic className='' />\n                            </Toggle>\n                            <Toggle size='sm' disabled>\n                                <Strikethrough className='' />\n                            </Toggle>\n                            <Toggle size='sm' disabled>\n                                <UnderlineIcon className='' />\n                            </Toggle>\n                            <Toggle size='sm' disabled>\n                                <Code className='' />\n                            </Toggle>\n                        </div>\n                    </div>\n                </div>\n            )}\n            <div className='py-2 px-3 h-full'>\n                <div className='prose prose-base dark:prose-invert max-w-none'>\n                    <Skeleton className='h-6 w-1/3 mb-4' />\n                    <Skeleton className='h-4 w-full mb-2' />\n                    <Skeleton className='h-4 w-3/4 mb-2' />\n                </div>\n            </div>\n        </div>\n    )\n  }\n\n  // Editor\n  return (\n    <div className='relative border border-border rounded-md bg-card'>\n      <TooltipProvider>\n\n        {/* start fixed menu */}\n        {editor && showFixedMenu && \n        <div className='sticky top-0 z-10 bg-card rounded-t-md border-b border-border' >\n          <div className='flex flex-row p-2 justify-between'>\n            <div className='flex flex-row gap-1'>\n                {/* type of node */}\n                <div className='flex flex-row gap-0.5 w-fit'>\n                    <Tooltip>\n                        <TooltipTrigger>\n                            <DropdownMenu modal={false}>\n                                <DropdownMenuTrigger asChild>\n                                    <Button size='sm' className='text-xs' variant='secondary' >\n                                        {editor.isActive('heading', { level: 1 }) && <Heading1 className='' />}\n                                        {editor.isActive('heading', { level: 2 }) && <Heading2 className='' />}\n                                        {editor.isActive('heading', { level: 3 }) && <Heading3 className='' />}\n                                        {editor.isActive('orderedList') && <ListOrdered className='' />}\n                                        {editor.isActive('bulletList') && <List className='' />}\n                                        {editor.isActive('codeBlock') && <Code className='' />}\n                                        {!editor.isActive('heading', { level: 1 }) && !editor.isActive('heading', { level: 2 }) && !editor.isActive('heading', { level: 3 }) && !editor.isActive('orderedList') && !editor.isActive('bulletList') && !editor.isActive('codeBlock') && <Type className='' />}\n                                    </Button>\n                                </DropdownMenuTrigger>\n                                <DropdownMenuContent align='start' side='bottom' sideOffset={4} className='text-xs w-[12rem]'>\n                                    <DropdownMenuItem onClick={() => editor.chain().focus().setParagraph().run()}>\n                                        <Type className='' />\n                                        <span className='text-xs'>Text</span>\n                                        <DropdownMenuShortcut>⌘ ⌥ 0</DropdownMenuShortcut>\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}>\n                                        <Heading1 className='' />\n                                        <span className='text-xs'>Heading 1</span>\n                                        <DropdownMenuShortcut>⌘ ⌥ 1</DropdownMenuShortcut>\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}>\n                                        <Heading2 className='' />\n                                        <span className='text-xs'>Heading 2</span>\n                                        <DropdownMenuShortcut>⌘ ⌥ 2</DropdownMenuShortcut>\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem onClick={() => editor.chain().focus().toggleHeading({ level: 3 }).run()}>\n                                        <Heading3 className='' />\n                                        <span className='text-xs'>Heading 3</span>\n                                        <DropdownMenuShortcut>⌘ ⌥ 3</DropdownMenuShortcut>\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem onClick={() => editor.chain().focus().toggleOrderedList().run()}>\n                                        <ListOrdered className='' />\n                                        <span className='text-xs'>Ordered list</span>\n                                        <DropdownMenuShortcut>⌘ ⇧ 7</DropdownMenuShortcut>\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem onClick={() => editor.chain().focus().toggleBulletList().run()}>\n                                        <List className='' />\n                                        <span className='text-xs'>Bullet list</span>\n                                        <DropdownMenuShortcut>⌘ ⇧ 8</DropdownMenuShortcut>\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem onClick={() => editor.chain().focus().toggleCodeBlock().run()}>\n                                        <Code className='' />\n                                        <span className='text-xs'>Code block</span>\n                                        <DropdownMenuShortcut>⌘ ⌥ C</DropdownMenuShortcut>\n                                    </DropdownMenuItem>\n                                </DropdownMenuContent>\n                            </DropdownMenu>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                            <p>Block type</p>\n                        </TooltipContent>\n                    </Tooltip>\n\n                </div>\n\n                {/* alignment */}\n                <div className='flex flex-row gap-0.5 w-fit'>\n                    <Tooltip>\n                        <TooltipTrigger>\n                            <DropdownMenu modal={false}>\n                                <DropdownMenuTrigger asChild>\n                                    <Button size='sm' className='text-xs' variant='secondary' >\n                                        {editor.isActive({ textAlign: 'left' }) && <AlignLeft className='' />}\n                                        {editor.isActive({ textAlign: 'center' }) && <AlignCenter className='' />}\n                                        {editor.isActive({ textAlign: 'right' }) && <AlignRight className='' />}\n                                        {!editor.isActive({ textAlign: 'left' }) && !editor.isActive({ textAlign: 'center' }) && !editor.isActive({ textAlign: 'right' }) && <AlignLeft className='' />}\n                                    </Button>\n                                </DropdownMenuTrigger>\n                                <DropdownMenuContent align='start' side='bottom' sideOffset={4} className='text-xs w-[10rem]'>\n                                    <DropdownMenuItem onClick={() => editor.chain().focus().setTextAlign('left').run()}>\n                                        <AlignLeft className='' />\n                                        <span className='text-xs'>Left</span>\n                                        <DropdownMenuShortcut>⌘ ⇧ L</DropdownMenuShortcut>\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem onClick={() => editor.chain().focus().setTextAlign('center').run()}>\n                                        <AlignCenter className='' />\n                                        <span className='text-xs'>Center</span>\n                                        <DropdownMenuShortcut>⌘ ⇧ E</DropdownMenuShortcut>\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem onClick={() => editor.chain().focus().setTextAlign('right').run()}>\n                                        <AlignRight className='' />\n                                        <span className='text-xs'>Right</span>\n                                        <DropdownMenuShortcut>⌘ ⇧ R</DropdownMenuShortcut>\n                                    </DropdownMenuItem>\n                                </DropdownMenuContent>\n                            </DropdownMenu>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                            <p>Text alignment</p>\n                        </TooltipContent>\n                    </Tooltip>\n                </div>\n\n                {/* formatting */}\n                <div className='flex flex-row gap-0.5 w-fit'>\n                    <Tooltip>\n                        <TooltipTrigger>\n                            <Toggle\n                                onClick={() => editor.chain().focus().toggleBold().run()}\n                                pressed={editor.isActive('bold')}\n                                size='sm'\n                            >\n                                <Bold className='' />\n                            </Toggle>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                            <p>Bold <span className='ml-2'>⌘B</span></p>\n                        </TooltipContent>\n                    </Tooltip>\n                    <Tooltip>\n                        <TooltipTrigger>\n                            <Toggle\n                                onClick={() => editor.chain().focus().toggleItalic().run()}\n                                pressed={editor.isActive('italic')}\n                                size='sm'\n                            >\n                                <Italic className='' />\n                            </Toggle>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                            <p>Italic <span className='ml-2'>⌘I</span></p>\n                        </TooltipContent>\n                    </Tooltip>\n                    <Tooltip>\n                        <TooltipTrigger>\n                            <Toggle\n                                onClick={() => editor.chain().focus().toggleStrike().run()}\n                                pressed={editor.isActive('strike')}\n                                size='sm'\n                            >\n                                <Strikethrough className='' />\n                            </Toggle>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                            <p>Strikethrough <span className='ml-2'>⌘⇧X</span></p>\n                        </TooltipContent>\n                    </Tooltip>\n                    <Tooltip>\n                        <TooltipTrigger>\n                            <Toggle\n                                onClick={() => editor.chain().focus().toggleUnderline().run()}\n                                pressed={editor.isActive('underline')}\n                                size='sm'\n                            >\n                                <UnderlineIcon className='' />\n                            </Toggle>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                            <p>Underline <span className='ml-2'>⌘U</span></p>\n                        </TooltipContent>\n                    </Tooltip>\n                    <Tooltip>\n                        <TooltipTrigger>\n                            <Toggle\n                                onClick={() => editor.chain().focus().toggleCode().run()}\n                                pressed={editor.isActive('code')}\n                                size='sm'\n                            >\n                                <Code className='' />\n                            </Toggle>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                            <p>Inline code <span className='ml-2'>⌘E</span></p>\n                        </TooltipContent>\n                    </Tooltip>\n                </div>\n            </div>\n            <div className='flex flex-row gap-1'>\n                <Button size='sm' variant='ghost' className='text-xs' onClick={handleCopy}>\n                    {isCopied ? <Check className='' /> : <Copy className='' />}\n                </Button>\n            </div>\n        </div>\n        \n        </div>\n        }\n        {/* end fixed menu */}\n\n        {/* start bubble menu */}\n        {editor && showBubbleMenu && (\n            <BubbleMenu\n            className=\"\"\n            tippyOptions={{ duration: 100 }}\n            editor={editor}\n            shouldShow={({ editor }) => {\n                const { from, to } = editor.state.selection\n                return from !== to\n            }}\n            >\n                <div className='flex flex-row gap-0.5 border rounded-md border-border bg-background p-0.5'>\n                    <Tooltip>\n                        <TooltipTrigger>\n                            <DropdownMenu modal={false}>\n                                <DropdownMenuTrigger asChild>\n                                    <Button size='sm' className='text-xs' variant='ghost'>\n                                        {editor.isActive('heading', { level: 1 }) ? <Heading1 className='h-4 w-4' /> : editor.isActive('heading', { level: 2 }) ? <Heading2 className='h-4 w-4' /> : editor.isActive('codeBlock') ? <Code className='h-4 w-4' /> : <Type className='h-4 w-4' />}\n                                        <ChevronDown className='h-4 w-4 text-muted-foreground' />\n                                    </Button>\n                                </DropdownMenuTrigger>\n                                <DropdownMenuContent portalled={false} align='start' side='bottom' sideOffset={10} className='text-xs w-[12rem] bg-background'>\n                                    <DropdownMenuItem onClick={() => editor.chain().setParagraph().focus().run()}>\n                                        <Type className='' />\n                                        <span className='text-xs'>Text</span>\n                                        <DropdownMenuShortcut>⌘ ⌥ 0</DropdownMenuShortcut>\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem onClick={() => editor.chain().toggleHeading({ level: 1 }).focus().run()}>\n                                        <Heading1 className='' />\n                                        <span className='text-xs'>Heading 1</span>\n                                        <DropdownMenuShortcut>⌘ ⌥ 1</DropdownMenuShortcut>\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem onClick={() => editor.chain().toggleHeading({ level: 2 }).focus().run()}>\n                                        <Heading2 className='' />\n                                        <span className='text-xs'>Heading 2</span>\n                                        <DropdownMenuShortcut>⌘ ⌥ 2</DropdownMenuShortcut>\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem onClick={() => editor.chain().toggleHeading({ level: 3 }).focus().run()}>\n                                        <Heading3 className='' />\n                                        <span className='text-xs'>Heading 3</span>\n                                        <DropdownMenuShortcut>⌘ ⌥ 3</DropdownMenuShortcut>\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem onClick={() => editor.chain().toggleOrderedList().focus().run()}>\n                                        <ListOrdered className='' />\n                                        <span className='text-xs'>Ordered list</span>\n                                        <DropdownMenuShortcut>⌘ ⇧ 7</DropdownMenuShortcut>\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem onClick={() => editor.chain().toggleBulletList().focus().run()}>\n                                        <List className='' />\n                                        <span className='text-xs'>Bullet list</span>\n                                        <DropdownMenuShortcut>⌘ ⇧ 8</DropdownMenuShortcut>\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem onClick={() => editor.chain().focus().toggleCodeBlock().run()}>\n                                        <Code className='' />\n                                        <span className='text-xs'>Code block</span>\n                                        <DropdownMenuShortcut>⌘ ⌥ C</DropdownMenuShortcut>\n                                    </DropdownMenuItem>\n                                </DropdownMenuContent>\n                            </DropdownMenu>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                            <p>Block type</p>\n                        </TooltipContent>\n                    </Tooltip>\n\n                    <Tooltip>\n                        <TooltipTrigger>\n                            <DropdownMenu modal={false}>\n                                <DropdownMenuTrigger asChild>\n                                    <Button size='sm' className='text-xs' variant='ghost' >\n                                        {editor.isActive({ textAlign: 'left' }) && <AlignLeft className='h-4 w-4' />}\n                                        {editor.isActive({ textAlign: 'center' }) && <AlignCenter className='h-4 w-4' />}\n                                        {editor.isActive({ textAlign: 'right' }) && <AlignRight className='h-4 w-4' />}\n                                        {!editor.isActive({ textAlign: 'left' }) && !editor.isActive({ textAlign: 'center' }) && !editor.isActive({ textAlign: 'right' }) && <AlignLeft className='h-4 w-4' />}\n                                        <ChevronDown className='h-4 w-4 text-muted-foreground' />\n                                    </Button>\n                                </DropdownMenuTrigger>\n                                <DropdownMenuContent portalled={false} align='start' side='bottom' sideOffset={10} className='text-xs w-[10rem] bg-background'>\n                                    <DropdownMenuItem onClick={() => editor.chain().setTextAlign('left').focus().run()}>\n                                        <AlignLeft className='' />\n                                        <span className='text-xs'>Left</span>\n                                        <DropdownMenuShortcut>⌘ ⇧ L</DropdownMenuShortcut>\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem onClick={() => editor.chain().setTextAlign('center').focus().run()}>\n                                        <AlignCenter className='' />\n                                        <span className='text-xs'>Center</span>\n                                        <DropdownMenuShortcut>⌘ ⇧ E</DropdownMenuShortcut>\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem onClick={() => editor.chain().setTextAlign('right').focus().run()}>\n                                        <AlignRight className='' />\n                                        <span className='text-xs'>Right</span>\n                                        <DropdownMenuShortcut>⌘ ⇧ R</DropdownMenuShortcut>\n                                    </DropdownMenuItem>\n                                </DropdownMenuContent>\n                            </DropdownMenu>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                            <p>Text alignment</p>\n                        </TooltipContent>\n                    </Tooltip>\n\n                    <Tooltip>\n                        <TooltipTrigger>\n                            <Toggle\n                                onClick={() => editor.chain().toggleBold().focus().run()}\n                                pressed={editor.isActive('bold')}\n                                size='sm'\n                                className='text-xs'\n                            >\n                                <Bold className='' />\n                            </Toggle>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                            <p>Bold <span className='ml-2'>⌘B</span></p>\n                        </TooltipContent>\n                    </Tooltip>\n                    <Tooltip>\n                        <TooltipTrigger>\n                            <Toggle\n                                onClick={() => editor.chain().toggleItalic().focus().run()}\n                                pressed={editor.isActive('italic')}\n                                size='sm'\n                                className='text-xs'\n                            >\n                                <Italic className='' />\n                            </Toggle>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                            <p>Italic <span className='ml-2'>⌘I</span></p>\n                        </TooltipContent>\n                    </Tooltip>\n                    <Tooltip>\n                        <TooltipTrigger>\n                            <Toggle\n                                onClick={() => editor.chain().toggleStrike().focus().run()}\n                                pressed={editor.isActive('strike')}\n                                size='sm'\n                                className='text-xs'\n                            >\n                                <Strikethrough className='' />\n                            </Toggle>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                            <p>Strikethrough <span className='ml-2'>⌘⇧X</span></p>\n                        </TooltipContent>\n                    </Tooltip>\n                    <Tooltip>\n                        <TooltipTrigger>\n                            <Toggle\n                                onClick={() => editor.chain().toggleUnderline().focus().run()}\n                                pressed={editor.isActive('underline')}\n                                size='sm'\n                                className='text-xs'\n                            >\n                                <UnderlineIcon className='' />\n                            </Toggle>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                            <p>Underline <span className='ml-2'>⌘U</span></p>\n                        </TooltipContent>\n                    </Tooltip>\n                    <Tooltip>\n                        <TooltipTrigger>\n                            <Toggle\n                                onClick={() => editor.chain().toggleCode().focus().run()}\n                                pressed={editor.isActive('code')}\n                                size='sm'\n                                className='text-xs'\n                            >\n                                <Code className='' />\n                            </Toggle>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                            <p>Inline code <span className='ml-2'>⌘E</span></p>\n                        </TooltipContent>\n                    </Tooltip>\n                </div>\n            </BubbleMenu>\n        )}\n        {/* end bubble menu */}\n\n        {/* start editor */}\n        <div className='py-2 px-3 h-full'>\n            <EditorContent editor={editor} className='prose prose-base dark:prose-invert max-w-none' />\n        </div>\n        {/* end editor */}\n\n      </TooltipProvider>\n    </div>\n  )\n}\n\nexport default Tiptap",
      "type": "registry:component"
    },
    {
      "path": "registry/tiptap-editor/components/dropdown-menu-tiptap.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  portalled = true,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content> & {\n  portalled?: boolean\n}) {\n  const content = (\n    <DropdownMenuPrimitive.Content\n      data-slot=\"dropdown-menu-content\"\n      sideOffset={sideOffset}\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n        className\n      )}\n      {...props}\n    />\n  )\n  return portalled ? (\n    <DropdownMenuPrimitive.Portal>{content}</DropdownMenuPrimitive.Portal>\n  ) : (\n    content\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/tiptap-editor/components/code-block.tsx",
      "content": "'use client'\n\nimport type { NodeViewProps } from '@tiptap/react'\nimport { NodeViewContent, NodeViewWrapper } from '@tiptap/react'\nimport { Check, Copy } from 'lucide-react'\nimport { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip'\nimport { Separator } from '@/components/ui/separator'\n\nexport function CodeBlock(props: NodeViewProps) {\n  const [isCopied, setIsCopied] = useState(false)\n  const languages = props.extension.options.lowlight.listLanguages()\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(props.node.textContent)\n    setIsCopied(true)\n    setTimeout(() => {\n      setIsCopied(false)\n    }, 2000)\n  }\n\n  const handleLanguageChange = (language: string) => {\n    props.updateAttributes({ language })\n  }\n\n  return (\n    <NodeViewWrapper className=\"code-block group relative\">\n      <Select\n        defaultValue={props.node.attrs.language || 'plaintext'}\n        onValueChange={handleLanguageChange}\n      >\n        <SelectTrigger className=\"absolute left-2 top-2 w-fit border-none bg-transparent shadow-none\" >\n          <SelectValue placeholder=\"Language\" />\n        </SelectTrigger>\n        <SelectContent>\n          {languages.map((lang: string) => (\n            <SelectItem key={lang} value={lang}>\n              {lang}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n      <TooltipProvider>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              className=\"absolute right-2 top-3.5 size-6\"\n              onClick={handleCopy}\n            >\n              {isCopied ? (\n                <Check className=\"size-4\" />\n              ) : (\n                <Copy className=\"size-4\" />\n              )}\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent>\n            <p>Copy code</p>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n      <Separator className='absolute top-13 left-0 right-0' />\n      <pre>\n        <NodeViewContent as=\"code\" />\n      </pre>\n    </NodeViewWrapper>\n  )\n} ",
      "type": "registry:component"
    }
  ],
  "tailwind": {
    "config": {
      "plugins": [
        "@tailwindcss/typography"
      ]
    }
  },
  "css": {
    "@layer base": {
      ".ProseMirror:focus": {
        "outline": "none"
      },
      ".tiptap p.is-editor-empty:first-child::before": {
        "color": "hsl(var(--muted-foreground))",
        "content": "attr(data-placeholder)",
        "float": "left",
        "height": "0",
        "pointer-events": "none"
      },
      ".prose .code-block": {
        "position": "relative"
      },
      ".prose .code-block pre": {
        "padding-top": "4rem"
      },
      ".prose .code-block select": {
        "position": "absolute",
        "top": "0.5rem",
        "right": "0.5rem"
      },
      ".prose pre": {
        "font-family": "'JetBrainsMono', monospace",
        "padding": "0.75rem 1rem",
        "border-radius": "0.5rem",
        "background-color": "hsl(var(--muted))",
        "white-space": "pre",
        "overflow-x": "auto"
      },
      "pre code": {
        "color": "inherit",
        "padding": "0",
        "background": "none",
        "font-size": "0.8rem"
      },
      "pre .hljs-comment, pre .hljs-quote": {
        "color": "#8b949e",
        "font-style": "italic"
      },
      "pre .hljs-variable, pre .hljs-template-variable, pre .hljs-strong, pre .hljs-emphasis, pre .hljs-quote, pre .hljs-tag, pre .hljs-name, pre .hljs-link, pre .hljs-regexp, pre .hljs-deletion, pre .hljs-selector-id, pre .hljs-selector-class, pre .hljs-selector-attr, pre .re .hljs-selector-pseudo": {
        "color": "#f97583"
      },
      "pre .hljs-literal, pre .hljs-number, pre .hljs-bullet, pre .hljs-type, pre .hljs-symbol, pre .hljs-meta, pre .hljs-link": {
        "color": "#ff7b72"
      },
      "pre .hljs-built_in, pre .hljs-class .hljs-title": {
        "color": "#ffa657"
      },
      "pre .hljs-string, pre .hljs-char, pre .hljs-addition, pre .hljs-subst": {
        "color": "#79c0ff"
      },
      "pre .hljs-attr, pre .hljs-attribute": {
        "color": "#79c0ff"
      },
      "pre .hljs-section, pre .hljs-title": {
        "color": "#d2a8ff"
      },
      "pre .hljs-keyword, pre .hljs-selector-tag": {
        "color": "#79c0ff"
      },
      "pre .hljs-emphasis": {
        "font-style": "italic"
      },
      "pre .hljs-strong": {
        "font-weight": "bold"
      },
      ".prose code:not(pre > code)": {
        "border-radius": "0.25rem",
        "background-color": "hsl(var(--background))",
        "padding": "0.25rem 0.375rem",
        "font-family": "var(--font-mono)",
        "font-size": "0.875rem",
        "font-weight": "600",
        "color": "hsl(var(--muted-foreground))"
      },
      ".prose pre code": {
        "white-space": "pre !important"
      },
      ".prose code::before, .prose code::after": {
        "content": "''"
      }
    }
  }
}