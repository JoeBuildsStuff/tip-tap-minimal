{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tiptap-editor",
  "type": "registry:block",
  "title": "TipTap Rich Text Editor",
  "description": "A feature-rich TipTap editor with formatting controls, bubble menu, and syntax highlighting.",
  "dependencies": [
    "@floating-ui/dom@^1.6.0",
    "@tiptap/extension-blockquote@^3.0.7",
    "@tiptap/extension-bubble-menu@^3.0.7",
    "@tiptap/extension-code@^3.0.7",
    "@tiptap/extension-code-block-lowlight@^3.0.7",
    "@tiptap/extension-floating-menu@^3.0.7",
    "@tiptap/extension-placeholder@^3.0.7",
    "@tiptap/extension-text-align@^3.0.7",
    "@tiptap/extension-underline@^3.0.7",
    "@tiptap/extensions@^3.0.7",
    "@tiptap/pm@^3.0.7",
    "@tiptap/react@^3.0.7",
    "@tiptap/starter-kit@^3.0.7",
    "highlight.js@^11.11.1",
    "lowlight@^3.3.0"
  ],
  "registryDependencies": [
    "button",
    "toggle",
    "tooltip",
    "dropdown-menu",
    "skeleton"
  ],
  "files": [
    {
      "path": "registry/tiptap-editor/components/tiptap.tsx",
      "content": "'use client'\n\nimport { useEditor, EditorContent, ReactNodeViewRenderer, Editor } from '@tiptap/react'\nimport StarterKit from '@tiptap/starter-kit'\nimport { Underline } from '@tiptap/extension-underline'\nimport { TextAlign } from '@tiptap/extension-text-align'\nimport { Placeholder } from '@tiptap/extensions'\nimport CodeBlockLowlight from '@tiptap/extension-code-block-lowlight'\nimport { Link } from '@tiptap/extension-link'\nimport { createLowlight, common } from 'lowlight'\nimport { useEffect, useState } from 'react'\n\nimport { TooltipProvider } from '@/components/ui/tooltip'\nimport {\n    Bold,\n    Italic,\n    Strikethrough,\n    Underline as UnderlineIcon,\n    Code,\n    Type,\n    AlignLeft,\n    X\n} from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { Toggle } from '@/components/ui/toggle'\nimport { Skeleton } from '@/components/ui/skeleton'\nimport { CodeBlock } from '@/components/tiptap/code-block'\nimport FixedMenu from '@/components/tiptap/fixed-menu'\nimport BubbleMenuComponent from '@/components/tiptap/bubble-menu'\n\n\nconst lowlight = createLowlight(common)\n\nconst CustomCodeBlock = CodeBlockLowlight.extend({\n  addNodeView() {\n    return ReactNodeViewRenderer(CodeBlock)\n  },\n})\n\n\n\ninterface TiptapProps {\n    content?: string\n    showFixedMenu?: boolean\n    showBubbleMenu?: boolean\n    onChange?: (content: string) => void\n}\n\nconst Tiptap = ({ content, showFixedMenu = true, showBubbleMenu = true, onChange }: TiptapProps) => {\n  const editor = useEditor({\n    extensions: [\n        StarterKit,\n        Underline,\n        TextAlign.configure({\n            types: ['heading', 'paragraph'],\n        }),\n        Placeholder.configure({\n            placeholder: 'Write somethingâ€¦',\n        }),\n        CustomCodeBlock.configure({\n            lowlight,\n        }),\n        Link.configure({\n            openOnClick: false,\n            autolink: true,\n            defaultProtocol: 'https',\n            protocols: ['http', 'https'],\n        }),\n    ],\n    content: content || ``,\n    immediatelyRender: false,\n    onUpdate: ({ editor }) => {\n      if (onChange) {\n        onChange(editor.getHTML())\n      }\n    },\n    editorProps: {\n      handleKeyDown: (_view, event) => {\n        // Handle Cmd+K (or Ctrl+K) for link\n        if ((event.metaKey || event.ctrlKey) && event.key === 'k') {\n          event.preventDefault()\n          // Note: Link functionality is now handled by LinkButton components\n          return true\n        }\n        return false\n      }\n    }\n  })\n\n  useEffect(() => {\n    if (editor) {\n      const editorContent = editor.getHTML()\n      // Compare the content and update only if it's different.\n      // This prevents an infinite loop.\n      if (content !== editorContent) {\n        editor.commands.setContent(content || '', { emitUpdate: false })\n      }\n    }\n  }, [content, editor])\n\n  // Skeleton\n  if (!editor) {\n    return (\n        <div className='relative border border-border rounded-md bg-card'>\n            {showFixedMenu && (\n                <div className='bg-card rounded-t-md border-b border-border' >\n                    <div className='flex flex-row gap-1 p-2'>\n                        <div className='flex flex-row gap-0.5 w-fit'>\n                            <Button size='sm' variant='secondary' disabled>\n                                <Type className='' />\n                            </Button>\n                        </div>\n                        <div className='flex flex-row gap-0.5 w-fit'>\n                            <Button size='sm' variant='secondary' disabled>\n                                <AlignLeft className='' />\n                            </Button>\n                        </div>\n                        <div className='flex flex-row gap-0.5 w-fit'>\n                            <Toggle size='sm' disabled>\n                                <Bold className='' />\n                            </Toggle>\n                            <Toggle size='sm' disabled>\n                                <Italic className='' />\n                            </Toggle>\n                            <Toggle size='sm' disabled>\n                                <Strikethrough className='' />\n                            </Toggle>\n                            <Toggle size='sm' disabled>\n                                <UnderlineIcon className='' />\n                            </Toggle>\n                            <Toggle size='sm' disabled>\n                                <Code className='' />\n                            </Toggle>\n                        </div>\n                    </div>\n                </div>\n            )}\n            <div className='py-2 px-3 h-full'>\n                <div className='prose prose-base dark:prose-invert max-w-none'>\n                    <Skeleton className='h-6 w-1/3 mb-4' />\n                    <Skeleton className='h-4 w-full mb-2' />\n                    <Skeleton className='h-4 w-3/4 mb-2' />\n                </div>\n            </div>\n        </div>\n    )\n  }\n\n    // Editor\n    return (\n        <div className='relative border border-border rounded-md bg-card'>\n            <TooltipProvider>\n\n                {/* start fixed menu */}\n                {showFixedMenu && <FixedMenu editor={editor} />}\n                {/* end fixed menu */}\n\n                {/* start bubble menu */}\n                {showBubbleMenu && <BubbleMenuComponent editor={editor} />}\n                {/* end bubble menu */}\n\n                {/* start editor */}\n                <div className='py-2 px-3 prose prose-base dark:prose-invert max-w-none'>\n                    <EditorContent \n                        editor={editor} \n                        className='[&_a:hover]:cursor-pointer' \n                    />\n                </div>\n                {/* end editor */}\n\n            </TooltipProvider>\n        </div>\n    )\n}\n\nexport default Tiptap",
      "type": "registry:component"
    },
    {
      "path": "registry/tiptap-editor/components/dropdown-menu-tiptap.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  portalled = true,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content> & {\n  portalled?: boolean\n}) {\n  const content = (\n    <DropdownMenuPrimitive.Content\n      data-slot=\"dropdown-menu-content\"\n      sideOffset={sideOffset}\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n        className\n      )}\n      {...props}\n    />\n  )\n  return portalled ? (\n    <DropdownMenuPrimitive.Portal>{content}</DropdownMenuPrimitive.Portal>\n  ) : (\n    content\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/tiptap-editor/components/code-block.tsx",
      "content": "'use client'\n\nimport type { NodeViewProps } from '@tiptap/react'\nimport { NodeViewContent, NodeViewWrapper } from '@tiptap/react'\nimport { Check, Copy } from 'lucide-react'\nimport { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip'\nimport { Separator } from '@/components/ui/separator'\n\nexport function CodeBlock(props: NodeViewProps) {\n  const [isCopied, setIsCopied] = useState(false)\n  const languages = props.extension.options.lowlight.listLanguages()\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(props.node.textContent)\n    setIsCopied(true)\n    setTimeout(() => {\n      setIsCopied(false)\n    }, 2000)\n  }\n\n  const handleLanguageChange = (language: string) => {\n    props.updateAttributes({ language })\n  }\n\n  return (\n    <NodeViewWrapper className=\"code-block group relative\">\n      <Select\n        defaultValue={props.node.attrs.language || 'plaintext'}\n        onValueChange={handleLanguageChange}\n      >\n        <SelectTrigger className=\"absolute left-2 top-2 w-fit border-none bg-transparent shadow-none\" >\n          <SelectValue placeholder=\"Language\" />\n        </SelectTrigger>\n        <SelectContent>\n          {languages.map((lang: string) => (\n            <SelectItem key={lang} value={lang}>\n              {lang}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n      <TooltipProvider>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              className=\"absolute right-2 top-3.5 size-6\"\n              onClick={handleCopy}\n            >\n              {isCopied ? (\n                <Check className=\"size-4\" />\n              ) : (\n                <Copy className=\"size-4\" />\n              )}\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent>\n            <p>Copy code</p>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n      <Separator className='absolute top-13 left-0 right-0' />\n      <pre>\n        <NodeViewContent />\n      </pre>\n    </NodeViewWrapper>\n  )\n} ",
      "type": "registry:component"
    }
  ],
  "tailwind": {
    "config": {
      "plugins": [
        "@tailwindcss/typography"
      ]
    }
  },
  "css": {
    "@layer base": {
      ".ProseMirror:focus": {
        "outline": "none"
      },
      ".tiptap p.is-editor-empty:first-child::before": {
        "color": "hsl(var(--muted-foreground))",
        "content": "attr(data-placeholder)",
        "float": "left",
        "height": "0",
        "pointer-events": "none"
      },
      ".prose .code-block": {
        "position": "relative"
      },
      ".prose .code-block pre": {
        "padding-top": "4rem"
      },
      ".prose .code-block select": {
        "position": "absolute",
        "top": "0.5rem",
        "right": "0.5rem"
      },
      ".prose pre": {
        "font-family": "'JetBrainsMono', monospace",
        "padding": "0.75rem 1rem",
        "border-radius": "0.5rem",
        "background-color": "hsl(var(--muted))",
        "white-space": "pre",
        "overflow-x": "auto"
      },
      "pre code": {
        "color": "inherit",
        "padding": "0",
        "background": "none",
        "font-size": "0.8rem"
      },
      "pre .hljs-comment, pre .hljs-quote": {
        "color": "#8b949e",
        "font-style": "italic"
      },
      "pre .hljs-variable, pre .hljs-template-variable, pre .hljs-strong, pre .hljs-emphasis, pre .hljs-quote, pre .hljs-tag, pre .hljs-name, pre .hljs-link, pre .hljs-regexp, pre .hljs-deletion, pre .hljs-selector-id, pre .hljs-selector-class, pre .hljs-selector-attr, pre .re .hljs-selector-pseudo": {
        "color": "#f97583"
      },
      "pre .hljs-literal, pre .hljs-number, pre .hljs-bullet, pre .hljs-type, pre .hljs-symbol, pre .hljs-meta, pre .hljs-link": {
        "color": "#ff7b72"
      },
      "pre .hljs-built_in, pre .hljs-class .hljs-title": {
        "color": "#ffa657"
      },
      "pre .hljs-string, pre .hljs-char, pre .hljs-addition, pre .hljs-subst": {
        "color": "#79c0ff"
      },
      "pre .hljs-attr, pre .hljs-attribute": {
        "color": "#79c0ff"
      },
      "pre .hljs-section, pre .hljs-title": {
        "color": "#d2a8ff"
      },
      "pre .hljs-keyword, pre .hljs-selector-tag": {
        "color": "#79c0ff"
      },
      "pre .hljs-emphasis": {
        "font-style": "italic"
      },
      "pre .hljs-strong": {
        "font-weight": "bold"
      },
      ".prose code:not(pre > code)": {
        "border-radius": "0.25rem",
        "background-color": "hsl(var(--background))",
        "padding": "0.25rem 0.375rem",
        "font-family": "var(--font-mono)",
        "font-size": "0.875rem",
        "font-weight": "600",
        "color": "hsl(var(--muted-foreground))"
      },
      ".prose pre code": {
        "white-space": "pre !important"
      },
      ".prose code::before, .prose code::after": {
        "content": "''"
      }
    }
  }
}